1. При первом изменении кода всегда создавайте новую ветку.
2. Всегда проверяйте, достаточно ли контекста.
3. Весь код и текст пользовательского интерфейса должны быть на английском языке.
4. Отвечайте в чате на русском языке.
5. Делайте частые и небольшие коммиты с понятными сообщениями.
6. Регулярно обновляйте основную ветку.
7. Удаляйте ветки после слияния.
8. Всегда тестируйте код перед слиянием.
9. Команды для командной строки пишите через bash.
10. Всегда указывайте полный путь к файлу, к которому вносите изменения.
11. Перед коммитом:
    - Обновите версию в package.json
    - Добавьте новую запись в CHANGELOG.md с описанием изменений
    - Обновите README.md
12. После коммита совершить слияние с master если версия стабильна

# ПЛАН РАЗРАБОТКИ

Изучив кодовую базу, предлагаю следующий план разработки для реализации указанных функциональностей:

1. **Добавление роли администратора с правами модерации всех задач:**

   - **Аутентификация и авторизация:**
     - Добавить в систему роль `admin`, которая будет отличаться от обычных пользователей `user`.
     - Обновить модель пользователя, добавив поле `role`, которое может принимать значения `'admin'` или `'user'`.
     - При входе пользователя проверять его роль и сохранять эту информацию в состоянии приложения (например, в контексте).

   - **Ограничение доступа:**
     - Обновить все маршруты и компоненты, которые требуют прав администратора, добавив проверки на роль.
     - Создать защиту маршрутов (Route Guard), которая будет перенаправлять пользователей без нужных прав.

   - **Модерация задач:**
     - Предоставить администраторам возможность просматривать, редактировать и удалять задачи всех пользователей.
     - Добавить соответствующие API-эндпоинты или обновить существующие с учетом прав доступа.

2. **Преобразование `Telpas` (Spaces) в `Komandas` (Teams) с правом редактирования только у администратора:**

   - **Переименование:**
     - Переименовать все упоминания `Space` на `Team` в коде, интерфейсах и компонентах.
     - Обновить файлы локализации, заменив `Telpas` на `Komandas`.

   - **Ограничение прав на редактирование:**
     - Убрать возможность создания, редактирования и удаления команд (`Teams`) для обычных пользователей.
     - Оставить эти возможности только для администраторов.
     - Скрыть соответствующие кнопки и формы от пользователей с ролью `user`.

   - **Обновление интерфейсов:**
     - Убедиться, что после переименования и изменений в правах все компоненты работают корректно.
     - Обновить навигацию и подсказки для пользователей.

3. **Создание отдельной страницы для администратора с обзором всех задач по командам:**

   - **Новый компонент страницы:**
     - Создать страницу `AdminTaskOverview`, доступную только администраторам.
     - На этой странице отобразить таблицу или список всех задач, сгруппированных по командам (`Teams`).

   - **Модуль данных:**
     - Обновить контекст данных или создать отдельные запросы для получения всех задач и команд из базы данных.
     - Убедиться, что данные загружаются эффективно и без избыточных запросов.

   - **Интерфейс пользователя:**
     - Использовать дизайн, похожий на страницу `List`, но с возможностью отображения задач из всех команд.
     - Добавить возможность фильтрации и сортировки по командам, статусам и другим параметрам.

   - **Проверка доступа:**
     - Добавить проверку роли `admin` при попытке доступа к этой странице.
     - Перенаправлять пользователей с ролью `user` на главную страницу или страницу с сообщением об отсутствии доступа.

4. **Возможность администратору назначать команду конкретному пользователю:**

   - **Обновление модели пользователя:**
     - Добавить в модель пользователя поле `teamId`, чтобы связывать пользователя с определенной командой.
     - Если пользователь может принадлежать к нескольким командам, использовать массив `teamIds`.

   - **Интерфейс для назначения команды:**
     - Создать на странице администратора или в профиле пользователя возможность назначения команды.
     - Реализовать выпадающий список или чекбоксы для выбора команды или команд.

   - **Обновление функциональности:**
     - При загрузке данных для пользователя учитывать его принадлежность к команде.
     - Ограничить видимость задач и команд для пользователей в соответствии с их назначенными командами.

   - **Ограничение прав:**
     - Обычные пользователи не должны иметь возможность изменять свою команду.
     - Все изменения команды пользователя выполняет только администратор.

**Шаги реализации:**

- **Шаг 1: Создание новой ветки для разработки**

  ```bash
  git checkout -b feature/xxx
  ```

- **Шаг 2: Добавление роли пользователя**

  - **Обновление модели пользователя**

  - **Обновление логики аутентификации**

    - При входе пользователя сохранять его роль в контексте данных.
    - Обновить функции и хуки, связанные с пользователями, чтобы учитывать роль.

- **Шаг 3: Переименование `Spaces` в `Teams`**

  - **Переименование файлов и переменных**

    - Переименовать все файлы и директории с `Space` на `Team`.

      ```bash
      // Пример для Linux/MacOS
      find ./src -type f -exec sed -i 's/Space/Team/g' {} +
      find ./src -type f -exec sed -i 's/space/team/g' {} +
      ```

  - **Обновление локализации**

    - В файлах локализации заменить `Telpas` на `Komandas`.

- **Шаг 4: Ограничение прав на редактирование команд**

  - **Добавление проверок роли в компонентах создания и редактирования команд**

  - **Скрытие кнопок и ссылок для пользователей**

    - Использовать условный рендеринг для отображения элементов только для администраторов.

- **Шаг 5: Создание страницы `AdminTaskOverview`**

  - **Создание нового компонента**

  - **Добавление маршрута**

    ```typescript
    // src/App.tsx или соответствующий файл маршрутизации
    <Route path="/admin/tasks" component={AdminTaskOverview} />
    ```

- **Шаг 6: Возможность назначения команды пользователю**

  - **Создание интерфейса для администрирования пользователей**

    - Например, страница или модальное окно со списком пользователей и возможностью назначения команды.

  - **Обновление пользователя в базе данных**

- **Шаг 7: Обновление контекста данных и ограничение доступа**

  - **Фильтрация данных по командам для обычных пользователей**

  - **Ограничение доступа к командам**

    - Пользователи видят только свою команду и связанные с ней задачи.

- **Шаг 8: Тестирование и отладка**

  - **Тестирование под разными ролями**

    - Создать учетные записи с ролью `admin` и `user` для проверки.

  - **Проверка корректности прав доступа**

    - Убедиться, что пользователи не могут получить доступ к запрещенным страницам или функциям.

- **Делайте частые и небольшие коммиты с понятными сообщениями.**

- **Всегда тестируйте код перед слиянием и убедитесь в стабильности новой версии.**

- **Удаляйте ветки после слияния, чтобы поддерживать чистоту репозитория.**

- **Всегда указывайте полный путь к файлу при внесении изменений и используйте английский язык в коде и интерфейсе пользователя.**

- **Обновляйте файлы локализации и проверяйте, что все тексты отображаются корректно.**