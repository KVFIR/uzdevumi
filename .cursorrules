1. При первом изменении кода всегда создавайте новую ветку.
2. Всегда проверяйте, достаточно ли контекста.
3. Весь код и текст пользовательского интерфейса должны быть на английском языке.
4. Отвечайте в чате на русском языке.
5. Делайте частые и небольшие коммиты с понятными сообщениями.
6. Регулярно обновляйте основную ветку.
7. Удаляйте ветки после слияния.
8. Всегда тестируйте код перед слиянием.
9. Команды для командной строки пишите через bash.
10. Всегда указывайте полный путь к файлу, к которому вносите изменения.
11. Перед коммитом:
    - Обновите версию в package.json
    - Добавьте новую запись в CHANGELOG.md с описанием изменений
    - Обновите README.md
12. После коммита совершить слияние с master если версия стабильна

# ПЛАН РАЗРАБОТКИ

1. **Добавление роли администратора:** (выполнено)

   - Обновить интерфейс User в src/interfaces.ts, добавив поле role: 'admin' | 'user'.
   - Модифицировать хук useLogin:
     ```typescript:src/hooks/useLogin.ts
     startLine: 21
     endLine: 35
     ```
     Добавить проверку роли пользователя при входе.
   - Обновить хук useSignup, чтобы при регистрации устанавливать роль 'user' по умолчанию.
   - Модифицировать UserContext для хранения роли пользователя.

2. **Преобразование Spaces в Teams:** (выполнено)

   - Переименовать все упоминания Space на Team в коде.
   - Обновить интерфейсы и типы данных.
   - Изменить компоненты, связанные с отображением и управлением командами.
   - Обновить хук useDb для работы с командами:
     ```typescript:src/hooks/useDb.ts
     startLine: 17
     endLine: 40
     ```
     Добавить проверку роли пользователя перед выполнением операций с командами.

3. **Создание страницы администратора:**

   - Создать новый компонент AdminTaskOverview.
   - Использовать хук useCollectionSub для получения всех задач:
     ```typescript:src/hooks/useCollectionSub.ts
     startLine: 12
     endLine: 41
     ```
     Модифицировать для получения задач всех пользователей.
   - Реализовать группировку задач по командам.
   - Добавить фильтрацию и сортировку задач.

4. **Назначение команды пользователю:**

   - Обновить интерфейс User, добавив поле teamIds (массив).
   - Создать компонент AdminUserManagement для управления пользователями.
   - Реализовать функционал назначения команд в хуке useDb.
   - Обновить хук useLogin для загрузки информации о командах пользователя при входе.

5. **Ограничение доступа:**

   - Создать компонент ProtectedRoute для защиты маршрутов, требующих прав администратора.
   - Обновить App.tsx, добавив ProtectedRoute для административных страниц.
   - Модифицировать хук useDb для проверки прав доступа перед выполнением операций:
     ```typescript:src/hooks/useDb.ts
     startLine: 7
     endLine: 15
     ```

6. **Обновление пользовательского интерфейса:**

   - Скрыть элементы управления командами для обычных пользователей.
   - Добавить индикатор роли пользователя в интерфейс.
   - Обновить навигацию, добавив ссылки на административные страницы для админов.

7. **Тестирование:**

   - Создать тестовые сценарии для проверки функциональности под разными ролями.
   - Протестировать ограничения доступа и видимость данных.
   - Проверить корректность работы всех обновленных компонентов и хуков.

8. **Документация и финальные штрихи:**

   - Обновить README.md, добавив информацию о новых функциях и ролях.
   - Обновить CHANGELOG.md, описав все внесенные изменения.
   - Проверить и обновить все комментарии в коде.

Помните о частых коммитах, тестировании перед слиянием и удалении веток после завершения работы над функциональностью.